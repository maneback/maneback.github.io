<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>漠·然</title>
  
  <subtitle>Maneback&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maneback.github.io/"/>
  <updated>2021-02-24T10:16:46.525Z</updated>
  <id>http://maneback.github.io/</id>
  
  <author>
    <name>Maneback</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode -- 第k个数</title>
    <link href="http://maneback.github.io/2021/kth-magic-number/"/>
    <id>http://maneback.github.io/2021/kth-magic-number/</id>
    <published>2021-02-24T10:07:06.000Z</published>
    <updated>2021-02-24T10:16:46.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目链接： <a href="https://leetcode-cn.com/problems/get-kth-magic-number-lcci/" target="_blank" rel="noopener">面试题 17.09</a></p><a id="more"></a><h4 id="题目描述">题目描述：</h4><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224180835.png"></p><h4 id="思路解释">思路解释：</h4><p>找到只含有 3、5、7因子的数字。我们可以从小到大逐个构造。此序列中的数字一定是由前面的某个数字乘以3或5或7中的某个因子得到。</p><p>因此最主要的问题在于：<strong>如何按照由小到大的顺序生成下一个数字</strong>，是由前面哪个数字乘以那个因子得到。</p><p>可以试着来构造：对于同一个因子，它一定是按照顺序来生成的，因此我们只需要记录每个因子上一次乘的数字，再在生成时比较三个因子生成的数字大小，把最小的加入序列，并修改相应的指针位置。</p><hr><h4 id="样例代码">样例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKthMagicNumber</span><span class="params">(self, k)</span>:</span></span><br><span class="line">            nums_list = [<span class="number">1</span>]*(k)</span><br><span class="line"></span><br><span class="line">            p3, p5, p7 = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(k<span class="number">-1</span>):</span><br><span class="line">                nx = min(min(<span class="number">3</span>*nums_list[p3], <span class="number">5</span>*nums_list[p5]), <span class="number">7</span>*nums_list[p7])</span><br><span class="line">                nums_list[i+<span class="number">1</span>] = nx</span><br><span class="line">                <span class="keyword">if</span> nx == <span class="number">3</span>*nums_list[p3]:</span><br><span class="line">                    p3+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nx == <span class="number">5</span>*nums_list[p5]:</span><br><span class="line">                    p5+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nx == <span class="number">7</span>*nums_list[p7]:</span><br><span class="line">                    p7+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> nums_list[k<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里有一个小细节：就是所有的判断都是 <code>if</code> 而不是 <code>elif</code> 。因为潜在这某两个指针生成的元素大小相等。</p><p>如我们生成 <code>15</code> 时，<code>p3</code> 和 <code>p5</code> 都要增加，否则下一次访问到<code>p5</code> 时生成的数字还是 <code>15</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接： &lt;a href=&quot;https://leetcode-cn.com/problems/get-kth-magic-number-lcci/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试题 17.09&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode -- 情侣牵手</title>
    <link href="http://maneback.github.io/2021/couple-holding/"/>
    <id>http://maneback.github.io/2021/couple-holding/</id>
    <published>2021-02-24T02:51:51.000Z</published>
    <updated>2021-02-24T03:04:58.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目链接 <a href="https://leetcode-cn.com/problems/couples-holding-hands/" target="_blank" rel="noopener">Leetcode-765</a></p><a id="more"></a><figure><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224105405.png" alt="image-20210224105405609"><figcaption aria-hidden="true">image-20210224105405609</figcaption></figure><h4 id="解题思路">解题思路</h4><p>对于一堆坐错位置的情侣的集合，只要按照首位相连环路交换位置即可，此种交换位置的方法一定是最少的，次数为情侣数量-1。</p><p>因此下一步的目标即寻找互相独立的情侣的集合，以及每个集合的情侣数量。</p><p>可以用并查集的方法来解决。编号为<code>n, n+1</code> 的两个人组成情侣编号为 <code>n/2</code>，以此编号来作为节点执行并查集算法</p><p>然后利用 map 记录每个并查集集合的大小 <span class="math inline">\(size_i\)</span>，再返回 <span class="math inline">\(\sum{size_i-1}\)</span></p><figure><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224105550.png" alt="image-20210224105550507"><figcaption aria-hidden="true">image-20210224105550507</figcaption></figure><h4 id="代码示例">代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minSwapCouple</span><span class="params">(row)</span>:</span></span><br><span class="line">    n = len(couple)//<span class="number">2</span></span><br><span class="line">    father = [i <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> father[x] ==x:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">       f = find(father[x])</span><br><span class="line">        father[x] = f</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        fx = find(x)</span><br><span class="line">        fy = find(y)</span><br><span class="line">        father[fx] = fy</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = row[<span class="number">2</span>*n]//<span class="number">2</span>, row[<span class="number">2</span>*n+<span class="number">1</span>]//<span class="number">2</span></span><br><span class="line">        union(a, b)</span><br><span class="line">    dit = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            f = find(i)</span><br><span class="line">            dit[f]+=<span class="number">1</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> dit.values():</span><br><span class="line">            ret+=(v<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接 &lt;a href=&quot;https://leetcode-cn.com/problems/couples-holding-hands/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode-765&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="并查集" scheme="http://maneback.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>单调栈基础</title>
    <link href="http://maneback.github.io/2021/monotonic-stack/"/>
    <id>http://maneback.github.io/2021/monotonic-stack/</id>
    <published>2021-02-24T02:46:14.000Z</published>
    <updated>2021-02-24T02:47:57.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      本文介绍单调栈的基本原理和用法
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="单调栈" scheme="http://maneback.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>单调队列基础</title>
    <link href="http://maneback.github.io/2021/monotonic-queue/"/>
    <id>http://maneback.github.io/2021/monotonic-queue/</id>
    <published>2021-02-24T02:30:35.000Z</published>
    <updated>2021-02-24T02:47:14.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>单调队列是一个特殊的队列，除满足队列先进先出的特点外，队列内的元素根据需要，还满足单调递增或单调递减。</p><p>以单调递增队列为例：当我们想队尾添加元素<code>x</code>时，为了保持单调性，要把当前队尾所有小于<code>x</code> 的元素从队列中移出，直到队列为空，或是找到了比<code>x</code> 大的元素。这样，单调队列头部始终保存的是当前队列内的最大值。</p><p>当我们在队列内移除元素时，若当前移除的元素与单调队列头部元素相等，说明此时此最大值在队列内已不存在，此元素也应被移除以维护队列内的最大值。</p><h4 id="例题">例题</h4><p><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">剑指offer - 59-II</a></p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224104022.png"></p><h4 id="代码示例">代码示例</h4><p>在这里，我们用一个数组（双向队列）<code>self.que</code> 保存所有的队列元素，<code>self.max_</code> 保存遇到的最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.que = collections.deque()</span><br><span class="line">        self.max_= collections.deque()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_value</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.max_:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> self.max_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_back</span><span class="params">(self, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.que.append(value)</span><br><span class="line">        <span class="keyword">while</span> self.max_ <span class="keyword">and</span> self.max_[<span class="number">-1</span>]&lt;value:</span><br><span class="line">            self.max_.pop()</span><br><span class="line">        self.max_.append(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_front</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.que:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        n = self.que[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> self.max_[<span class="number">0</span>] == self.que[<span class="number">0</span>]:</span><br><span class="line">            self.max_.popleft()</span><br><span class="line">        self.que.popleft()</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      介绍单调队列的基本原理与用法
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="单调队列" scheme="http://maneback.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode - 区间合并</title>
    <link href="http://maneback.github.io/2021/merge-intervals/"/>
    <id>http://maneback.github.io/2021/merge-intervals/</id>
    <published>2021-02-24T02:06:25.000Z</published>
    <updated>2021-02-24T02:12:48.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目链接： <a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">Leetcode-56</a></p><a id="more"></a><h4 id="题目描述">题目描述</h4><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224100900.png"></p><h4 id="思路">思路</h4><p>如果我们按照区间起始位置将所有区间排序，那么可合并的区间在排序后的数组中是连续的。如下图：相同颜色的区间可以被合并。</p><p>这样的话只一次遍历区间，并判断每个区间能不能与前一个区间合并。</p><p>判断一个区间能不能与前面的区间合并：只需要比较当前区间的起始与前一个区间（可能是已经合并过的区间）的结束位置的大小。</p><p>若当前区间在前一个区间结束前开始，则可以合并。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224100018.png"></p><h4 id="代码示例">代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(intervals)</span>:</span></span><br><span class="line">    intervals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    merged = []</span><br><span class="line">    <span class="keyword">for</span> inter <span class="keyword">in</span> intervals:</span><br><span class="line">        <span class="comment"># cannot be merged</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merged <span class="keyword">or</span> inter[<span class="number">0</span>]&gt;merged[<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 此区间成为一个新的区间</span></span><br><span class="line">            merged.append(inter)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 可以合并，取两个区间结束点较大的一个</span></span><br><span class="line">            merged[<span class="number">-1</span>][<span class="number">1</span>] = max(merged[<span class="number">-1</span>][<span class="number">1</span>], inter[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> merged</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接： &lt;a href=&quot;https://leetcode-cn.com/problems/merge-intervals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode-56&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode -- unique binary search trees II</title>
    <link href="http://maneback.github.io/2021/longest-turbulent-subarray/"/>
    <id>http://maneback.github.io/2021/longest-turbulent-subarray/</id>
    <published>2021-02-09T03:02:50.000Z</published>
    <updated>2021-02-24T02:15:42.984Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目链接 ： <a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/" target="_blank" rel="noopener">Leetcode-978</a></p><a id="more"></a><h4 id="题目描述">题目描述</h4><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210209110647.png"></p><h4 id="解题思路">解题思路</h4><p>最长湍流子数组，形象地描述就是数组中的一个子数组，连续数字大小交替变化，我们把这种交替变化用 <strong>上升 下降</strong> 表示，如果<code>arr[-1]&lt;arr[-2]</code> 则称下降序列，如果 <code>arr[-1]&gt;arr[-2]</code> 则称上升序列，即用最后一个变化方向代表整个序列的变化方向。</p><p>考虑动态规划的算法，找到如何描述状态以及状态转移方程。用 <code>dp[i][0]</code> 表示以 <code>num[i]</code> 结尾的上升序列的长度；用<code>dp[i][1]</code> 表示以<code>num[i]</code> 结尾的下降序列的长度。<strong>考虑到上升序列去掉最后一个数字之后成为下降序列，下降序列去掉最后一个数字之后成为上升序列。</strong></p><p>然后我们考虑当前状态 <code>dp[i][0], dp[i][1]</code> 与下一个数组<code>num[i+1]</code> 之间的大小关系：</p><ul><li>如果 <code>num[i+1]&gt;num[i]</code> 则可以把<code>num[i+1]</code>添加到下降序列最后， 成为上升序列；而下降序列长度为1（因为连续两个下降方向）。</li><li>如果 <code>num[i+1]&lt;num[i]</code> 则可以把<code>num[i+1]</code>添加到上升序列最后， 成为下降序列；而上升序列长度为1（因为连续两个上升方向）。</li><li>如果<code>num[i+1]=num[i]</code> 则上升序列和下降序列的长度均变为 1。</li></ul><p>然后从两个数组中找到最长的那个子数组。</p><p>有了状态表示和状态转移方程，就可以写代码解题了。</p><h4 id="示例代码">示例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxTurbulenceSize</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        dp = [[<span class="number">0</span>, <span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&lt;arr[i<span class="number">-1</span>]):</span><br><span class="line">                dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">                dp[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> (arr[i]&gt;arr[i<span class="number">-1</span>]):</span><br><span class="line">                dp[i][<span class="number">1</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">                dp[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            ret = max(ret, dp[i][<span class="number">0</span>])</span><br><span class="line">            ret = max(ret, dp[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接 ： &lt;a href=&quot;https://leetcode-cn.com/problems/longest-turbulent-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode-978&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://maneback.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>VScode 快捷键</title>
    <link href="http://maneback.github.io/2021/vscodeshortcut/"/>
    <id>http://maneback.github.io/2021/vscodeshortcut/</id>
    <published>2021-01-17T13:15:35.000Z</published>
    <updated>2021-02-09T02:56:41.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol type="1"><li>多行编辑<ul><li>鼠标+ <code>Alt+Shift</code> 按键选择，此方式只能选择连续竖列的对应位置不可随意插入光标位置，且不可间隔列</li><li><code>Shift+Ctrl</code> 数列选择, 可以在多个地方插入光标。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      记录常用的 VScode 快捷键
    
    </summary>
    
      <category term="技术" scheme="http://maneback.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="VScode" scheme="http://maneback.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 必要的插件</title>
    <link href="http://maneback.github.io/2021/installed-plugin/"/>
    <id>http://maneback.github.io/2021/installed-plugin/</id>
    <published>2021-01-05T09:53:18.000Z</published>
    <updated>2021-02-09T02:56:41.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="基础环境及必要插件">基础环境及必要插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save  ##wenti</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save ##</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><h4 id="在hexo-博客中插入图片">在hexo 博客中插入图片。</h4><p>先安装插件 <code>hexo-asset-image</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli --save</span><br><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>第一种最简单的方法是使用图床，但是之前折腾过一段时间使用 PicGO +github 图床，但是稳定，后放弃。改用 hexo 自带的资源文件夹。</p><p>第二种方法是启用 assert 资源文件夹，但是这个东西很不智能。当你在 markdown 文档引用图片（不管是相对路径还是绝对路径）都能在文档中显示，但是渲染成 HTML 文件时，就会路径出错了。要用这个新的插件 <code>hexo-asset-image</code> 。</p><h4 id="在-hexo-博客中正常显示-latex-公式">在 hexo 博客中正常显示 latex 公式</h4><p>hexo 竟然对 latex 公式的支持这么不智能。唉，绝了。</p><p>更换 renderer。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall hexo-renderer-marked</span><br><span class="line"><span class="built_in">npm</span> install hexo-renderer-pandoc</span><br></pre></td></tr></table></figure><p>安装完 <code>hexo-render-pandoc</code> ，它在运行 <code>hexo s</code> 命令时会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR][hexo-renderer-pandoc] pandoc exited with code 9: pandoc: Unknown extension: smart</span><br></pre></td></tr></table></figure><p>这时需要把 <code>node_modules\hexo-renderer-pandoc\index.js</code> 文件中的这个东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [ <span class="string">'-f'</span>, <span class="string">'markdown-smart'</span>+extensions, <span class="string">'-t'</span>, <span class="string">'html-smart'</span>, math]</span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [ <span class="string">'-f'</span>, <span class="string">'markdown'</span>+extensions, <span class="string">'-t'</span>, <span class="string">'html'</span>, math]</span><br></pre></td></tr></table></figure><p>参考来源 <a href="https://github.com/wzpan/hexo-renderer-pandoc/issues/36#issuecomment-555134526" target="_blank" rel="noopener">hexo-renderer-pandoc issues36</a></p>]]></content>
    
    <summary type="html">
    
      配置环境要用到的插件。
    
    </summary>
    
      <category term="Blog" scheme="http://maneback.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="http://maneback.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="http://maneback.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode -- unique binary search trees II</title>
    <link href="http://maneback.github.io/2020/unique-binary-search-trees-ii/"/>
    <id>http://maneback.github.io/2020/unique-binary-search-trees-ii/</id>
    <published>2020-06-16T03:39:50.000Z</published>
    <updated>2021-02-24T02:53:46.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="题目描述">题目描述</h4><p>给定一个整数 <em>n</em>，生成所有由 1 ... <em>n</em> 为节点所组成的 <strong>二叉搜索树</strong> 。</p><p>0&lt;=n&lt;=8</p><h4 id="解题思路">解题思路</h4><p>对于一个二叉搜索树中的任一个节点来讲，其左子树的所有节点的值都小于该节点，其右子树的所有节点的值都大于该节点。</p><p>对于一个递归的问题，我们只考虑每一步应该做什么，顺序是什么，应该返回什么。</p><p>在每一步中，我们只考虑构建一棵子树，然后把子树返回给上一节点。</p><p>假设某一步中我们以一个区间<code>[start, end]</code> 来构造二叉搜索树，那么对于任意的 <code>i, start&lt;=i&lt;=end</code>， 可以以<code>i</code>为根节点来开始构造二叉搜索树，它的左子树则是以区间<code>[start, i-1]</code>构造的二叉搜索树，它的右子树是以区间<code>[i+1, end]</code> 构造的二叉搜索树，就这样递归地构造即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">        node = Treenode(start, i)</span><br><span class="line">        lc = dfs(start, i<span class="number">-1</span>)</span><br><span class="line">        rc = dfs(i+<span class="number">1</span>, end)</span><br></pre></td></tr></table></figure><p>但是对于区间 <code>[start, i-1]</code> 和<code>[i+1, end]</code>构造的左右子树，可能不止为1， 然而其可以任意地组合，这样，我们用一个数组保存以<code>[start， end]</code>构造的所有子树，然后再将其返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start&gt;end:</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">None</span>, ]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">        node = Treenode(start, i)</span><br><span class="line">        lc = dfs(start, i<span class="number">-1</span>)</span><br><span class="line">        rc = dfs(i+<span class="number">1</span>, end)</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lc:</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> rc:</span><br><span class="line">                node.left = l</span><br><span class="line">                node.right = r</span><br><span class="line">                res.append(node)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>这样，我们就完成了代码的书写。</p><h4 id="解题代码">解题代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start&gt;end:</span><br><span class="line">            <span class="keyword">return</span> [<span class="keyword">None</span>, ]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">            node = Treenode(start, i)</span><br><span class="line">            lc = dfs(start, i<span class="number">-1</span>)</span><br><span class="line">            rc = dfs(i+<span class="number">1</span>, end)</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> lc:</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> rc:</span><br><span class="line">                    node.left = l</span><br><span class="line">                    node.right = r</span><br><span class="line">                    res.append(node)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">   <span class="keyword">return</span> dfs(<span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      LeetCode-95
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="tree" scheme="http://maneback.github.io/tags/tree/"/>
    
      <category term="dynamic programming" scheme="http://maneback.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode -- binary tree maximum path sum</title>
    <link href="http://maneback.github.io/2020/binary-tree-maximum-path-sum/"/>
    <id>http://maneback.github.io/2020/binary-tree-maximum-path-sum/</id>
    <published>2020-06-15T13:04:57.000Z</published>
    <updated>2021-02-24T02:49:39.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>题目链接</strong>： <a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/</a></p><h4 id="题目描述">题目描述</h4><p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p><h4 id="解题思路">解题思路</h4><p>首先，这是一道非常标准的树形结构搜索的问题，对于树结构相关的问题，都可以用深度优先搜索或广度优先搜索的方法来解决，此题也不例外。只要考虑好在每个节点上做什么操作、在 child 节点上做什么操作，以及是先序、中序还是后续就行了。</p><p>关于这个题，很明显是后序。因为你需要找到当前 node 节点的子节点的路径长，才能确定通过当前 node 节点的路径长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">       <span class="comment"># pass</span></span><br><span class="line">    dfs(node.left)</span><br><span class="line">    dfs(node.right)</span><br><span class="line">    <span class="comment"># do sth to node</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">#path.</span></span><br></pre></td></tr></table></figure><p>对于这个问题，其路径可以不经过 root 节点，那么对于最长路径中的任意一个节点 n，可选的操作有四种：①从 n 的父节点连接 n 到 n 的左子树；②从 n 的父节点连接 n 到 n 的右子树；③从 n 的左子树连接到 n 连接到 n 的右子树；④最大路径从 n 点结束，包括最上的点和最下的点两种情况。</p><p>我们用全局变量 <code>path</code> 表示当前的全局最优解。</p><p>对于前两种情况，到目前为止我们只求得了或者说是遍历过了最长路径的部分，因此这一部分要把经过该节点的子路径的长度返回给父节点继续计算。其中除了情况一和二之外，还有一种就是情况四中的最大路径最下从当前节点结束：即它的所有子树的最大路径都是负值。因此我们要针对这三种情况计算局部最优值。</p><p>对于情况三，在得到了左右子树的最大路径值后，都能直接计算出该情况的解，因此此时直接将其与全局最优解比较。此外还可能其其中一个子树的最大子路径值为负数，且父节点的最大子路径值也为负数，即最大路径最上从当前节点结束，都要和全局最优解比较。</p><p>具体代码如下：</p><h4 id="解题代码">解题代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        self.path = <span class="number">-1000000</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">           dl = dfs(node.left)</span><br><span class="line">            dr = node.right</span><br><span class="line">            <span class="comment"># local max</span></span><br><span class="line">            local_max = max(node.val, node.val+dl, node.val+dr)</span><br><span class="line">            self.path = max(node.val+dl+dr, local_max, self.path)</span><br><span class="line">            <span class="keyword">return</span> local_max</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> self.path</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      LeetCode-124
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="tree" scheme="http://maneback.github.io/tags/tree/"/>
    
      <category term="BFS&amp;DFS" scheme="http://maneback.github.io/tags/BFS-DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode -- subsets</title>
    <link href="http://maneback.github.io/2020/subset/"/>
    <id>http://maneback.github.io/2020/subset/</id>
    <published>2020-06-09T00:38:42.000Z</published>
    <updated>2021-01-06T13:26:44.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>原题链接：<a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subsets/</a></p><a id="more"></a><h5 id="题目描述">题目描述：</h5><p>给定一组<strong>不含重复元素</strong>的整数数组 <em>nums</em>，返回该数组所有可能的子集（幂集）。</p><p><strong>说明：</strong>解集不能包含重复的子集。</p><h5 id="示例">示例：</h5><blockquote><p>输入: nums = [1,2,3] 输出: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []]</p></blockquote><h5 id="解法">解法：</h5><p>本题是非常经典的回溯法解决的题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subset</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(first=<span class="number">0</span>, curr=[])</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(curr)==k:</span><br><span class="line">            output.append(curr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(first, n):</span><br><span class="line">            curr.append(nums[i])</span><br><span class="line">            backtrack(i+<span class="number">1</span>, curr)</span><br><span class="line">            curr.pop()</span><br><span class="line">    output = []</span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">        backtrack()</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题链接：&lt;a href=&quot;https://leetcode-cn.com/problems/subsets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/subsets/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://maneback.github.io/categories/Algorithm/"/>
    
    
      <category term="Leetcode" scheme="http://maneback.github.io/tags/Leetcode/"/>
    
      <category term="backtrack" scheme="http://maneback.github.io/tags/backtrack/"/>
    
  </entry>
  
  <entry>
    <title>论文解读|点云深度学习方法--PointNet</title>
    <link href="http://maneback.github.io/2020/pointnet/"/>
    <id>http://maneback.github.io/2020/pointnet/</id>
    <published>2020-05-19T10:49:03.000Z</published>
    <updated>2021-02-24T02:21:31.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation [CVPR 2017]</p><a id="more"></a><blockquote><p>论文解读系列第①篇</p></blockquote><p>今天带来的是 CVPR 2017 的一篇文章 PointNet。这片文章可以说是深度学习直接处理原始点云数据 (raw point cloud) 的开篇之作。目前在 Google Scholar 上面查到的引用量已经超过了 2000 次。</p><h2 id="一背景">一、背景</h2><p>先来看一看点云与深度学习结合的问题。近年来，深度学习方法取得了广泛的关注和应用，在图像、语音、文字等领域都取得了很好的应用成果。而点云是一种新型的 3D 空间的数据表示格式。它一般以一个四维向量 (x, y, z, i) 表示一个点。其中， (x, y, z) 是空间中的三维坐标，而 i 表示的是该点的反射强度。</p><p>当 2D 图像输入到深度学习的网络中时，它是规则的数据，每个像素值的位置都可以以一个二维坐标来表示，且它在空间上是连续的表示，即相邻像素就是在图像中相邻的。而点云的表示方法有所不同。它是无序且非结构化的表示，只是一个由点的坐标构成的集合，而相邻点之间并没有这种空间的相邻关系。这就会造成如下面这样的结果：</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102056.png"></p><p>如上图：一副点云由若干的点构成，但是同一副点云图像其中点的排列顺序可能会不同，当以两者分别输入卷积网络中时，无论对于分类任务还是对于目标检测任务来讲，会带来不同的结果。然而实际上二者表示的是同一个物体或内容。这显然不是我们想要的结果。</p><p>卷积网络需要结构化的输入，而点云的输入是非结构化的，这样就会导致卷积网络并不适用于点云数据，基于此，人们想出了两种预处理方式，来使点云成为结构化的输入。</p><ul><li><p>第一种方法是 multi-view 投影的方法。即以点云在多个视角的投影作为输入，用原来的 2D 图像的卷积网络来处理。</p></li><li><p>第二种方法是 voxelization 的方法，即把空间划分成离散的体素 (3D voxel)， 然后每个点按照坐标位置决定落到那个体素单元中。这样，就可以把原来无序的点云输入规则化。</p></li></ul><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102059.png"></p><p>但是这种预处理的方式肯定会造成一定的信息损失。</p><p>基于此问题，本文的作者就提出了 PointNet 神经网络来处理点云数据。设计了一种直接处理点云来提取特征的新型网络，很好地考虑了对于输入点<strong>排列顺序</strong>的不变性。以及网络对于输入点集小的扰动和数据破坏（丢失）也具有很好的鲁棒性。</p><h2 id="二网络结构">二、网络结构</h2><p>首先来总结一下点云数据的三个特征以及由此带来的问题：</p><ul><li><strong>Unordered</strong> ：点云在采集和存储是都是无序的，因此要求网络必须对一副点云所有可能的输入保持结果不变。</li><li><strong>Interaction among points</strong> ：点云中每个点都与其周围的若干点表示了一定的空间结果，但是在存储来讲，并不能表示出这种结构。</li><li><strong>Invariance under transformation</strong> ：点云表示了一定的三维结构，这要求网络的处理结果对于点云的旋转、转换等必须保持结果不变性。</li></ul><p>针对以上的问题，本文采取的方法是：在初始阶段，对点云中每个点都<strong>单独</strong>进行<strong>相同</strong>的处理，然后再应用一个对称函数(MaxPooling)来解决点集的无序性问题。</p><p><strong>PointNet 的网络结构如下：</strong></p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102102.png"></p><p>网络的输入即为一个 nx3 的向量，表示 n 个点的三维坐标。可以用于分类任务与分割任务。对于分类任务，输出结果为 k 个分类类别的得分；对于分割任务，输出结果为 n 个点逐个的所属分割部分的得分。</p><p>最重要的三个部分已在图中圈出：</p><ul><li>两个小型的 T-Net 网络用于学习一个坐标变换矩阵，并应于该坐标变换矩阵增强输入数据，使得网络对于输入的旋转等操作具有一定的不变性。</li><li>MaxPooling 操作，以对称函数解决点云输入的不变性。</li><li>Aggregation 操作，将全局特征拼接到每个点的特征后面，用于分类任务。</li></ul><p>首先，对于 nx3 的输入数据，先经过一个两层的 MLP ，提取得到每个点的 64 维特征，此外输入数据与特征数据分别经过 input transform 和 feature transform 操作进行增强。这样我们就得到了一个 nx64 的特征，每个点的特征以一个 64 维的向量表示。在此之后，再经过一个三层的 MLP 将 64 维的特征升到 1024 维。 然后经过 maxpooling 操作提取得到一个全局的 1024 维特征。然后输入到分类网络中用以分类。</p><p>对于如何解决无序性问题，使得模型能够不受输入的排列顺序的影响。那么作者提出了三种可能的解决方法：(1)是将输入按一个规范顺序排序。这个很显然是不可行的。(2)是将输入作为一个连续的序列来训练一个RNN，并通过所有可能的排序来增加训练数据。一方面，有研究表明在RNN中顺序确实是有影响的，不能被忽略；另一方面，当point clouds 数据集很大的时候，对所有的N!个排列都处理一次也是不现实的。(3)是采用对称函数。</p><p>下面来介绍一下对称函数。所谓对称函数，通俗来讲就是参数的输入顺序不会影响函数的结果。如加法、乘法等，都是非常常见且明显的对称函数，可以任意改变参数的顺序。对于 maxpooling 操作来讲，它当然也是对称函数，无论输入的 n 个点的排列顺序如何，在对 nx1024 维的特征应用 maxpooling 操作时，得到的结果永远都是一样的。</p><p>这样借用 maxpooling 函数的对称性，我们就可以无视输入的无序性。先对每个点单独地进行相同的操作，然后再应用对称函数提取全局特征就好了。形式上来讲，可以表示为： <span class="math display">\[f(x_1, x_2,...x_n)=g(h(x_1), h(x_2),...h(x_n))\]</span> 函数 <span class="math inline">\(f\)</span> 是作用在点集上的函数，函数 <span class="math inline">\(h\)</span> 是作用在单个点上的函数，而函数 <span class="math inline">\(g\)</span> 是一个作用在经过处理的点 <span class="math inline">\(h(x)\)</span> 上的对称函数，这样我们就可以用函数 <span class="math inline">\(g\)</span> 和 <span class="math inline">\(h\)</span> 来得到关于点集的操作 <span class="math inline">\(f\)</span> 。而相关的理论证明，将会在第四部分给出。</p><p>对于分割任务来讲，既要考虑全局的特征，又要考虑全局特征，所以做法便是将 1024 维的全局特征聚合到每一个 64 为的点特征之后，这样得到的特征就既包含了全局的信息，也包含了点的局部信息了，从而用于分割任务。</p><h2 id="三结果">三、结果</h2><p>在论文中，作者给出了 PointNet 网络在分类、部分分割与场景语义分割三项任务上的结果。</p><h3 id="分类">3.1 分类</h3><p>在 ModelNet40 数据集上分类的准确率如下：</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102105.png"></p><p>在这项任务中，与 multi-view 与 voxel 的方法进行了对比。</p><h3 id="部分分割">3.2 部分分割</h3><p>所谓部分分割，就是对每个点生成一个类别标记：</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102111.png"></p><p>在 ModelNet40 部分分割结果如下，评价指标为 IoU:</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102115.png"></p><h3 id="场景语义分割">3.3 场景语义分割</h3><p>场景语义分割任务与部分分割任务类似，也是为每个点分配一个类别标记，判断每个点属于哪个物体。数据集为 Stanford 3D semantic parsing data Set.</p><p>在这一项任务中，输入不在是三维向量，而是九维，包括 (三维坐标，RGB值，归一化后的三维坐标)。得到的结果如下：</p><h2 id="四理论分析">四、理论分析</h2><p>在这一章节中，给出一些理论上的分析。</p><h3 id="近似逼近性">4.1 近似逼近性</h3><p>首先，给出为什么可以用 <span class="math inline">\(g\)</span> 和 <span class="math inline">\(h\)</span> 来近似逼近函数 <span class="math inline">\(f\)</span>。</p><p>对于定义在集合上的连续函数 <span class="math inline">\(f\)</span> , 有如下的性质：</p><p><span class="math display">\[\begin{align}&amp;\chi = \{S:S\subseteq[0,1]^m and\; |S|=n \}\\&amp;f:\chi \to \mathbb{R},\mbox{ 是一个连续的集合函数。}\\&amp;\mbox{Hausdorff distance  } d_H(.,.) \mbox{ 定义元素之间的距离。}\\&amp; \forall\, \theta&gt;0, \exist  \,\delta&gt;0, for\;any\;S_1,S_2\in\chi:\\&amp;if\;\;d_H(S_1,S_2)&lt;\delta, then\;|f(S_1)-f(S_2)|&lt;\theta\end{align}\]</span></p><p>由于连续函数 <span class="math inline">\(f\)</span> 有了这个性质，那么我们就可以定义一个对称函数 <span class="math inline">\(g\)</span> ，是一个<span class="math inline">\(\gamma\)</span> 和 max的复合函数。使得函数 <span class="math inline">\(g\)</span> 作用于 <span class="math inline">\(h(x)\)</span> 之上的函数值与 <span class="math inline">\(f(S)\)</span> 之间的数值足够小。</p><p>换句话说，我们可以用这样一个作用于每一元素的函数 <span class="math inline">\(h\)</span> 以及一个对称函数 <span class="math inline">\(MAX\)</span> 来近似集合函数 <span class="math inline">\(f\)</span> 。</p><p><span class="math display">\[\begin{align}&amp;\forall \theta&gt;0,\;\exist \mbox{ 一个连续函数 }\;h\\&amp;\mbox{ 和一个对称函数 }\;g(x_1,...,x_n)=\gamma\circ MAX:\\&amp;\mbox{such that for any }\; S\in \chi :\\&amp;\bigg|f(S)-\gamma\bigg(MAX_{x_i\in S}\{h(x_i)\}\bigg)\bigg|&lt;\theta\\&amp; (x_1,...,x_n \mbox{ 是 }S\mbox{ 中的元素。})\end{align}\]</span></p><h3 id="稳定性分析">4.2 稳定性分析</h3><p>第二是全局特征维度的维度K对结果的影响，以及整个网络的鲁棒性分析。</p><p>首先令 <span class="math inline">\(u\)</span> 是由一个点集经过 <span class="math inline">\(h\)</span> 计算每个点，再进行最大池化，得到一个 k 维向量的函数，那么 <span class="math inline">\(f\)</span> 可以表示为 <span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(u\)</span> 的复合函数。</p><p>那么，对于任意一个点集 S，都存在另外两个点集 C 和 N ，使得在任意一个不小于 C 且不大于N 的点集 T，<span class="math inline">\(f(S) = f(T)\)</span>。即对于一个集合 <span class="math inline">\(S\)</span>, <span class="math inline">\(f(S)\)</span> 的函数值，只受到这个集合 <span class="math inline">\(C\)</span> 的影响，更多的点对于函数的结果并不起到作用。</p><p>b)说明C中点的个数不大于K。这个K就是特征的维度。因为我们在用 <span class="math inline">\(u\)</span> 做最大池化操作时，对于 K 维中的每一个，只会选择来自一个点的特征作为该位的最大值，也就是说 MAXPOOLING 操作只会选择 K 个起作用的点。</p><p>因此，maxpooling 时候的特征维度K会影响C，进而影响分类的准确率。</p><p>$$ <span class="math display">\[\begin{align}&amp; 令\; u: \chi\to\mathbb{R}^K\\&amp;u=MAX_{X_i\in S}\{h(x_i)\}\;\;即u由一组点生成一个K维的向量。\\&amp;f=\gamma\circ u,则有：\\&amp;(a)\;\forall S,\; \exist \mathcal{C}_s \,\mathcal{N}_S\subseteq\chi,\,f(S)=f(T)\;if\;\mathcal{C}_s\subseteq T\subseteq \mathcal{N}_S\\&amp;(b)\; |\mathcal{C}_S|\leq K\end{align}\]</span> $$</p><p><span class="math display">\[\begin{align}&amp;(a)式说明\;f(S)\;的函数值由一组关键点\mathcal{C}_S 决定\\&amp;且添加的噪声点只要不超过\mathcal{N}_S,对函数值不会产生影响。\\&amp;(b)式说明关键点的个数 |\mathcal{C}_S|存在上界,\\&amp;不大于K，即最大池化时特征的维数。\end{align}\]</span></p><p><span class="math display">\[称 \mathcal{C}_S 为\; critical\; point\; set,K\;为\;bottleneck\; dimension\]</span></p><p>上述证明说明了此网络对于输入中一些微小的扰动与离群点具有很好的鲁棒性，并不会很大程度上影响结果。</p><p>下面给出了一些点云输入的 $_S $ 和 <span class="math inline">\(\mathcal{C}_N\)</span> 集合可视化例子。可以看出经过这个网络提取出的 <span class="math inline">\(\mathcal{C}_S\)</span> 集合，大体上描绘了这个物体的大致轮廓。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102120.png"></p><p>下图是 maxpooling 的维度 K 对准确率的影响。横坐标是 K 设置的数值，纵坐标是分类的准确率。每条线是每个输入中点的数量。可以看到随着 K 的增加，准确率有所上升，但是当 K 到达 1000 左右时基本上就不再变了，所以本文中 K 的取值就是选择 1024 ，以达到效率与精确度的最好权衡。</p><h3 id="设计分析">4.3 设计分析</h3><p>在之前，提到过有三种方法解决无序性问题：排序、RNN、对称函数，现在给出这三种设计方法的效果对比：</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102123.png"></p><p>可以看到对称函数操作的准确性最高，而在所考虑的三种对称函数中，maxpooling 的准确性又是其中最高的。</p><p>此外，我们提到过 T-Net 对齐网络的作用，在这里给出它的实际效果，可以看出它可以在一定程度上提高分类的准确率。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102125.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation [CVPR 2017]&lt;/p&gt;
    
    </summary>
    
      <category term="论文解读" scheme="http://maneback.github.io/categories/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="点云" scheme="http://maneback.github.io/tags/%E7%82%B9%E4%BA%91/"/>
    
      <category term="深度学习" scheme="http://maneback.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="学习" scheme="http://maneback.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于微信的一件小事</title>
    <link href="http://maneback.github.io/2020/wechat-account/"/>
    <id>http://maneback.github.io/2020/wechat-account/</id>
    <published>2020-05-06T02:12:58.000Z</published>
    <updated>2021-02-24T02:22:04.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>首发于个人公众号<strong>不愿意透露姓名的松哥</strong>， <a href="https://mp.weixin.qq.com/s/wYHRxYCJoi1L6r0mJqV0uQ" target="_blank" rel="noopener">文章链接</a>， 文章略有修改。</p><p>我开始飘了，都开始写公众号文章了，都开始思考微信公众号的产品逻辑了，都开始分析评论公众号的种种优缺点了。</p></blockquote><p><strong>零</strong></p><p>最近，突然发现微信里面开始有了一些“小动作”。</p><p>比如文章底部开始有相关推荐，比如看一看里面开始带话题，比如信息流中开始有公众号推荐。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102151.jpg"></p><p><strong>一</strong></p><p>稍微思考一下微信的使用时间，基本上可以分为以下两部分：聊天刷朋友圈+公众号文章阅读。只要你的好友也还在用微信，你就不得不保证前者的使用时长。而后者呢，则是由公众号文章的质量决定的。</p><p>再看一看近来（其实也不太近了）微信其他的一些更新：公众号改为信息流的形式，增加浮窗的个数，越来越强化看一看的推荐，（还在测试中的？）付费阅读？以及上述的几个小细节。这些功能都是针对后者的优化，也就是为公众号服务的，而不是针对普通用户。</p><p>获取讯息是多数人的重要需求。如果公众号的这些创作者不再在微信中创作，就有可能去微博、去知乎、去B站等等，而普通用户这方面在微信花费的时间也会流失。</p><p>微信公众号只是平台，而不生产内容。给内容创作者以更好的体验和有效的激励（更多真实的关注和阅读量）、创造更好的生态与创作环境，留下好的创作者，留下好的内容，用户使用时长自然也会增长。而人的时间和精力也是有限的，在微信上“浪费”的时间更多了，留给其他应用的时间也就更少了。</p><p><strong>二</strong></p><p>微信公众号确实产生了许多高质量的文章，也有很多优质的账号。但是与其他的内容平台还是有许多的不足。比如公众号中禁止插入外部链接（真很难理解这么大的一个互联网公司的这种做法），公众号文章那（几乎等于）没有的分享功能，更不要说公众号这（近乎）残废的留言互动功能。</p><p>公众号系统是以<strong>账号</strong>为中心的，而之外的知乎和微博等，则更多的偏向以内容为中心，比如热榜、热搜的存在等等，这种形式的内容传播，是可以覆盖到其所有用户的。此外，在微博上，内容可以在用户之间任意地转发传播以及曝光；在知乎上，用户更关注的是问题与问题之下的回答与讨论，也就是内容本身，有时用户对于内容的产出者并不是关注太多。</p><p>而对于公众号来讲，其内容的传播链条很短，更何况也无法被常用的搜索引擎爬取（有几个人知道在哪里可以搜索公众号的文章呢？）。几乎没有办法借助微信官方的推荐等等，来增加自己的关注量。即使现在微信官方去出面，去强化看一看功能，增加优质内容的推荐曝光，但是这种也同样是基于微信好友关系，那么势必会影响其传播范围。与微博、知乎官方所使用的推荐算法的覆盖范围差远了。</p><p>因此在那之前，对于公众号自媒体来讲，增加关注量是一件很困难的事情，他们要在微博、知乎、博客等各种平台留下自己的账号、利用自己在其他地方的影响力来给自己增加关注。用户也只能在其他应用、或是好友分享的某一篇文章、或是公众号主们之间的互推来关注到一个高价值的公众号。</p><p>但是也不得不承认，优质公众号的用户粘性极高，你看到的内容完全是你自己的选择。公众号有更多“个人品牌”的属性在里面。对一个公众号产生了认同感，才会去持续关注，追热点蹭热度很难带来持久的关注增长。也正是因为公众号系统以<strong>账号</strong>为中心，其也特别适合那种专一于特定主题，目标群体明确的账号。点点关注不迷路。</p><p><strong>最后</strong></p><p>在知乎上，关于微信一些设计与功能的提问与讨论也有很多。但是该用微信的人还是在用，毕竟在这个领域完全没有拿得出手的竞争者。微信的用户数量实在是太庞大了，用户实际的使用场景实在是太多了，它在功能上有很多被人们吐槽的地方。</p><p>但是你要明白：微信它本身只是一个即时通讯类的软件，而不是一个什么都包了的软件。你所觉得的一些功能残缺，可能这并不是它当初所设想的使用场景。微信的日活超过十亿，有人用它聊天，有人用它办公，有人用它卖货，也有人用它发广告等等等等。</p><p>只要你想明白了这件事情，你就会明白它为什么对某些用户需求无动于衷。同时要考虑它做出某些改进的原因。</p><p>另外最近在微博上面也看到了这样一段话：</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224102158.jpg"></p><p>虽然主语讲的是微博，但是对微信来说也是同理。</p>]]></content>
    
    <summary type="html">
    
      我的第一篇微信公众号文章
    
    </summary>
    
      <category term="公众号文章" scheme="http://maneback.github.io/categories/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="微信公众号" scheme="http://maneback.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>【转载】央行报告-中国城镇居民家庭户均总资产317.9万元</title>
    <link href="http://maneback.github.io/2020/city-asset/"/>
    <id>http://maneback.github.io/2020/city-asset/</id>
    <published>2020-05-01T08:42:14.000Z</published>
    <updated>2021-02-24T02:17:37.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文为央行发布的关于中国城镇居民家庭户均资产的调查报告，对三万余户家庭的资产情况进行了调查，可以说是当前此类调查中最为完整、详实的调查。</p><p>但是不知为何据说原链接地址的文章已经不可见，现放到这里留存。</p><a id="more"></a><center>2019年中国城镇居民家庭资产负债情况调查</center><p>中国人民银行调查统计司城镇居民家庭资产负债调查课题组于2019年10月中下旬在全国30个省（自治区、直辖市）对3万余户城镇居民家庭开展了资产负债情况调查。从当前掌握的资料看，这是国内关于城镇居民资产负债情况最为完整、详实的调查之一。</p><p>调查显示：第一，城镇居民家庭户均总资产317.9万元，资产分布分化明显；家庭资产以实物资产为主，住房占比近七成，住房拥有率达到96.0％；金融资产占比较低，仅为20.4％，居民家庭更偏好无风险金融资产。</p><p>第二，城镇居民家庭负债参与率高，为56.5％，负债集中化现象明显，负债最高20％家庭承担总样本家庭债务的61.4％；家庭负债结构相对单一，负债来源以银行贷款为主，房贷是家庭负债的主要构成，占家庭总负债的75.9％。</p><p>第三，城镇居民家庭净资产均值为289.0万元，分化程度高于资产的分化程度。与美国相比，我国城镇居民家庭财富分布相对均衡（美国净资产最高1％家庭的净资产占全部家庭净资产的比重为38.6％，我国为17.1％）。</p><p>第四，城镇居民家庭资产负债率为9.1％，总体稳健，少数家庭资不抵债；居民家庭债务收入比为1.02，略高于美国居民水平（0.93）；偿债能力总体较强，偿债收入比为18.4％，居民家庭债务风险总体可控。</p><p>第五，需关注两方面问题。一是居民家庭金融资产负债率较高，存在一定流动性风险。二是部分家庭债务风险相对较高，主要表现在以下几个方面：部分低资产家庭资不抵债，违约风险高；中青年群体负债压力大，债务风险较高；老年群体投资银行理财、资管、信托等金融产品较多，风险较大；刚需型房贷家庭的债务风险突出。</p><center><b>城镇居民家庭资产分化明显，金融资产占比低，房产占比超七成</b></center><p><strong>城镇居民家庭资产分化明显</strong></p><p>调查数据显示，城镇居民家庭总资产均值为317.9万元，中位数为163.0万元。均值与中位数之间相差154.9万元，表明居民家庭资产分布不均。居民家庭资产分布不均衡主要体现在以下四个方面。</p><p>第一，居民家庭资产的集中度较高，财富更多地集中在少数家庭。将家庭总资产由低到高分为六组，最低20％家庭所拥有的资产仅占全部样本家庭资产的2.6％，而总资产最高20％家庭的总资产占比为63.0％，其中最高10％家庭的总资产占比为47.5％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101553.png"></p><p>第二，区域间的家庭资产分布差异显著，经济发达地区的居民家庭资产水平高。分经济区域看，东部地区明显高于其他地区。东部地区居民家庭户均总资产为461.0万元，分别高出中部、西部、东北地区197.5万元、253.4万元和296.0万元。东北地区居民家庭户均总资产最低，仅占东部地区居民家庭的三分之一左右。</p><p>分省份看，家庭资产最高的三个省（自治区、直辖市）为北京、上海和江苏，最低的三个省（自治区、直辖市）为新疆、吉林和甘肃。其中，北京居民家庭户均总资产约为新疆居民家庭的7倍。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101600.png"></p><p><small>△图1　各省居民家庭户均总资产</small></p><p>第三，高收入家庭拥有更多资产。将家庭总收入从低到高排序，总收入最高20％家庭所拥有的总资产占全部样本家庭总资产的半数以上。其中，收入最高10％家庭户均总资产1204.8万元，是收入最低20％家庭户均总资产的13.7倍。</p><p>第四，户主的年龄、学历水平及职业均影响家庭资产分布。一是家庭总资产随户主年龄的提高呈现先增加后减少的特征。户主年龄为56～64岁的家庭户均总资产最高，18～25岁的户均总资产最低。二是户主的学历水平越高，家庭户均总资产越多。户主为研究生及以上学历的家庭户均总资产明显高于均值，高中及以下学历的家庭户均总资产最低。三是户主为企业管理人员和个体经营者的家庭总资产明显高于均值，其余家庭总资产均低于平均水平。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101604.png"></p><p><small> △图2　户主分组（年龄、学历和职业）的家庭资产分布</small></p><p><strong>家庭资产以实物资产为主，房产是其主要构成</strong></p><p>调查显示，我国城镇居民家庭资产以实物资产为主，户均253.0万元，占家庭总资产的八成。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101609.png"></p><p><small>△图3　家庭实物资产构成情况</small></p><p>第一，住房是家庭实物资产的重要构成，居民家庭住房拥有率相对均衡。我国城镇居民家庭的实物资产中，74.2％为住房资产，户均住房资产187.8万元。居民住房资产占家庭总资产的比重为59.1％。和美国相比，我国居民家庭住房资产比重偏高，高于美国居民家庭28.5个百分点。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101612.png"></p><p><small>△图4　中国和美国不同收入组的住房拥有率</small></p><p>居民的住房拥有情况相对均衡。我国城镇居民家庭的住房拥有率为96.0％，有一套住房的家庭占比为58.4％，有两套住房的占比为31.0％，有三套及以上住房的占比为10.5％，户均拥有住房1.5套。美国住户总体的住房拥有率为63.7％，低于我国32.3个百分点。按家庭收入从低到高排序，美国收入最低20％家庭的住房拥有率仅为32.9％，而我国收入最低20％家庭的住房拥有率也为89.1％。</p><p>城镇居民家庭拥有的住房数量越多，其家庭资产中住房资产的占比反而越低。拥有一套住房的家庭的总资产中住房资产的占比为64.3％，有两套住房家庭的住房资产占比为62.7％，有三套及以上住房家庭的住房资产占比为51.0％。这主要是因为多房产家庭在解决了基本住房需求后，更倾向于多元化资产配置。</p><p>第二，商铺及厂房等经营性资产是家庭资产差距大的重要原因。受调查家庭中，15.9％的家庭拥有商铺或厂房等经营性资产，这些家庭的经营性资产均值为257.5万元，占其家庭总资产的33.1％。拥有经营性资产家庭的户均总资产为776.8万元，是没有经营性资产家庭的3.4倍。</p><p>家庭总资产越多，经营性资产的拥有率越高，经营性资产在家庭资产中的比重越大。按家庭总资产排序，资产最高10％的家庭中，近半数的家庭拥有经营性资产，这些家庭的经营性资产占家庭总资产的35.6％；而资产最低20％家庭中仅有3.5％的家庭拥有经营性资产，其经营性资产占家庭总资产的比重为22.4％。</p><p><strong>金融资产分化明显，居民家庭更偏好无风险金融资产</strong></p><p>受调查家庭中，有99.7％的家庭拥有金融资产，户均金融资产64.9万元，占家庭总资产的20.4％。与美国相比，我国城镇居民家庭金融资产占总资产的比重偏低，比美国低22.1的百分点。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101614.png" style="zoom:80%;"></p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101617.png"></p><p><small>△图5　城镇居民家庭金融资产构成</small></p><p>第一，金融资产的分化程度更明显。将家庭分别按照金融资产和实物资产从低到高进行排序，金融资产最高10％家庭所拥有的金融资产占所有样本家庭的58.3％，而实物资产最高10％家庭拥有的资产占比为47.1％。可见，金融资产的不均衡程度更显著。</p><p>第二，居民投资偏稳健，家庭无风险金融资产持有率高。调查显示，无风险金融资产的持有率高于风险金融资产的持有率，受调查家庭中无风险金融资产的持有率为99.6％，户均35.2万元；风险金融资产的持有率为59.6％，户均50.1万元。从调查样本整体看来，户均持有无风险金融资产35.0万元，占总金融资产的比达到53.9％，高于风险金融资产。</p><p>第三，高资产、高学历家庭参与风险金融市场的意愿更强，金融资产表现形式更加多元化。随着家庭资产的增加，家庭持有风险金融产品的比率稳步提高。将家庭总资产排序，总资产最高20％家庭的风险金融资产的持有率为87.9％，最低20％家庭的持有率为29.8％。而且，总资产越多的家庭参与各类金融市场的程度越高，高资产家庭在各类金融产品上的持有率均明显高于全国平均水平。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101726.png"></p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101619.png"></p><p><small>△图6　不同资产组和不同学历水平居民家庭的各类金融产品持有率</small></p><p>从学历水平看，学历越高的家庭金融资产表现形式越多元化。调查数据显示，随着户主学历水平的提高，家庭持有活期与定期存款的比重有所下降，而持有银行理财产品、互联网金融及股票、基金等金融资产的比例有所上升。这主要是因为高学历群体通常更了解相关的金融知识和信息，加之其往往拥有较高的收入和资产，因而在满足了预防性需求后更愿意投资高风险、高收益的金融产品。</p><p><strong>城镇居民家庭负债参与率高，负债结构相对单一，房贷是主要构成部分</strong></p><p>第一，家庭负债参与率较高，负债集中化现象明显。目前我国城镇居民家庭运用杠杆现象较为普遍。受调查家庭中，有负债的家庭占比为56.5％。分地区看，东北地区居民家庭负债参与率最低，为42.1％；东部、中部分别为57.9％和55.7％；西部地区最高，为60.1％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101623.png"></p><p>有负债的家庭中，户均家庭总负债为51.2万元。其中，53.8％的居民家庭负债余额在30万元以下，35.6％的家庭负债余额在30万～100万元，10.5％的家庭负债余额在100万元以上。按照家庭负债余额从低到高排序，负债最低20％家庭的户均总负债3.2万元，所承担的负债仅占全部样本的1.3％；负债最高20％家庭的户均负债157.3万元，所承担的负债占全部样本的61.4％。</p><p>第二，家庭负债结构相对单一，负债来源以银行贷款为主，房贷为家庭负债的主要构成。从负债来源看，城镇居民家庭的负债以银行贷款为主。有负债的居民家庭中，户均银行贷款49.6万元，占家庭总负债的96.8％。银行体系外的负债占比低，仅为3.2％，其中民间借贷和互联网金融产品贷款的户均负债额分别为1.2万元和0.1万元，占家庭总负债的比重分别为2.4％和0.2％。</p><p>从负债用途看，房贷是家庭负债的基本构成。有负债的居民家庭中，76.8％的家庭有住房贷款，户均家庭住房贷款余额为38.9万元，占家庭总负债的比重为75.9％。调查显示，75.9％的居民家庭将负债用于购房，24.8％的居民家庭用于日常消费，12.8％的居民家庭用于买车或车位，9.6％的居民家庭用于装修或购买家电，9.3％的居民家庭用于实体经营，9.0％的居民家庭用于教育，3.9％的居民家庭用于医疗，2.3％的居民家庭用于金融投资。</p><p>第三，富裕家庭的负债参与率更高，且更容易获得银行贷款，低资产家庭对民间借贷的依赖度相对较高。按家庭总资产排序，资产最高20％家庭的负债参与率最高，为63.3％，且负债中97.1％为银行贷款。资产最低20％家庭的负债参与率最低，为38.6％。资产最低20％家庭的负债来源中，89.4％来源于银行贷款，远低于其他家庭；9.0％来自于民间借贷，远高于其他家庭。这主要是因为低资产家庭往往收入较低，或者没有稳定的收入来源，从银行渠道获得贷款相对困难，因而对民间借贷的依赖度相对较高。</p><p>第四，居民家庭负债集中于中青年和高学历家庭。受调查家庭中，户主年龄为26～35岁的家庭负债参与率最高，为73.1％。随着年龄的提高，家庭负债参与率有所下降，户主年龄为65岁及以上的家庭负债参与率最低，为25.1％。家庭负债参与率与户主的学历成正比，户主受教育程度越高，家庭负债参与率越高。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101625.png"></p><p><small>.△图7　按户主年龄和学历分组的家庭负债参与率</small></p><p><strong>家庭净资产分化程度高于资产的分化程度，但中国城镇居民家庭财富分布较美国均衡</strong></p><p>将居民家庭的资产扣除负债，得到的净资产更能真实地反映居民家庭的财富水平。调查数据显示，中国城镇居民家庭净资产均值为289.0万元。家庭净资产中位数为141.0万元，比均值低148.0万元。</p><p>居民家庭净资产分化程度高于家庭总资产。将家庭净资产从低到高排序，净资产最低20％家庭的净资产仅占全部样本家庭净资产的2.3％，而最高20％家庭的净资产占64.5％。对高资产组家庭作进一步细分，最高10％的家庭所拥有的净资产占全部样本家庭净资产的49.0％，最高1％的家庭占17.1％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101628.png"></p><p>与美国相比，中国居民家庭财富的分布相对均衡。2016年，按家庭净资产排序，美国全国最高1％的家庭所拥有的净资产占全部样本家庭净资产的38.6％，略高于随后9％家庭的38.5％，而其余90％的家庭仅占22.8％，不到三分之一，说明美国居民家庭的财富向最富裕家庭集中的特征明显。我们的调查显示，在中国城镇居民家庭中，这三个比例分别为17.1％、31.9％和51.0％。即使假设我国乡村居民家庭的净资产均为零，将这些零资产的样本按乡村人口占比加入调查样本后，新样本中最高1％、随后9％和其余90％的家庭净财富占比分别为21.9％、38.5％和39.6％，我国居民家庭财富相对均衡。</p><p><strong>居民家庭债务风险总体可控</strong></p><p><strong>城镇居民家庭资产负债率总体稳健，少数家庭资不抵债</strong></p><p>总体看，我国城镇居民家庭的资产负债率相对较低。调查显示，我国城镇居民家庭资产负债率的均值为9.1％，低于美国的12.1％。其中，有负债家庭的资产负债率均值为14.8％，中位数为15.8％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101634.png"></p><p>从资产负债率的分布看，资产规模越低，负债参与率越低，有负债家庭的资产负债率越高。尤其是资产规模在10万元及以下的家庭中，有负债的家庭的平均资产负债率高达111％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101638.png"></p><p><small>△图8　不同资产负债率区间的家庭占比情况</small></p><p>有负债的家庭中，大部分家庭的资产负债率处于（0％，10％］的区间，少数家庭存在资不抵债的情况。调查样本中，资产负债率处于（0％，10％］的家庭占比为19.4％，占有负债家庭的34.4％。有0.4％共138户家庭的资产负债率超过了100％，这些家庭的债务占全部样本家庭债务的比重为0.4％。这些家庭主要有两种情况：一是低资产家庭（资产少于10万元），一共106户，债务规模占所有资不抵债家庭债务的比重为17％，他们的债务规模不大，但资产规模更小，资产无法覆盖债务；二是参与企业经营的家庭，一共23户，债务规模占所有资不抵债家庭债务的比重为41.1％，他们有一定规模的资产，但债务规模更大，而且借债的原因主要是实体经营。</p><p><strong>居民家庭债务收入比为1.02，略高于美国居民水平</strong></p><p>债务收入比是指居民家庭的债务余额与其年收入的比值，能更为直观地反映居民家庭的债务规模。调查显示，我国城镇居民家庭的平均债务收入比为1.02，略高于美国0.93的水平。其中，有负债家庭的债务收入比的均值和中位数均为1.6。有少数家庭的债务规模远高于家庭收入，有1.2％共221户家庭的债务收入比超过了10，这些家庭的债务占全部样本家庭债务的比重为5.8％。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101642.png"></p><p><small>△图9　不同债务收入比区间的家庭占比情况</small></p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101645.png"></p><p><small>△图10　不同偿债收入比区间的家庭占比情况</small></p><p><strong>偿债能力总体较强</strong></p><p>我国城镇居民家庭偿债能力总体较强。调查数据显示，城镇居民家庭偿债收入比平均为18.4％，其中房贷偿债收入比为9.1％。有负债家庭的偿债收入比的均值为29.5％，中位数为26.7％。部分家庭的偿债负担较重，12.8％的家庭月偿债收入比超过四成，这些家庭的债务占全部样本家庭债务的比重为34.7％；4.5％的家庭月偿债收入比超过六成，债务占比为12.8％。</p><p>分收入水平看，低收入家庭偿债压力相对较大。调查数据显示，按家庭总收入从低到高排序，收入最低20％家庭月偿债收入比为24.8％，高于均值6.4个百分点，比最高20％家庭高9.1个百分点。这些低收入家庭中，13.8％的家庭月偿债收入比超过四成，6.7％的家庭超过六成。</p><p>实体经营家庭的偿债压力大。调查样本中，没有经营性债务家庭的偿债收入比为16.1％，有经营性债务家庭的偿债收入比为30.1％，高于前者14个百分点。</p><p>工薪阶层债务偿还压力明显。分职业看，户主为企业一般员工和国家机关、事业单位人员的家庭月偿债收入比相对高，分别为22.5％和19.9％，均高于平均偿债收入比。</p><p><strong>值得注意的问题</strong></p><p>第一，城镇居民家庭金融资产负债率较高，存在一定的流动性风险。城镇居民家庭资产配置高度集中于房产，金融资产占比低，金融资产负债率相对较高。调查显示，我国城镇居民家庭金融资产负债率为44.6％，其中，有负债家庭的金融资产负债率均值为85.3％，中位数为117.3％，半数以上的家庭金融资产负债率超过了100％。可见，居民资产负债率虽整体稳健，但是资产流动性较差，存在一定的流动性风险。</p><p>第二，部分低资产家庭资不抵债，违约风险高。受调查家庭中，总资产低于10万元的共有792户，这些家庭的资产负债率为30.7％，远高于其他家庭，其中有106户家庭的资产负债率超过了100％。这106户家庭多数无房无车，仅有少量存款，户主主要从事个体经营或其他职业，没有稳定收入，负债却相对较高，一旦遇到意外情况，违约风险较高。</p><p>第三，中青年群体负债压力较大，债务风险相对较高。户主年龄在26～35岁的居民家庭债务参与率、户均债务规模、资产负债率、债务收入比都要高于其他家庭。中青年家庭由于面临购房、成家生子、子女教育等多方面的支出压力，负债现象更为普遍，债务负担相对较重，偿债压力相对较大。</p><p>第四，老年群体投资银行理财、资管、信托等金融产品较多，风险较大。调查显示，户主年龄为65岁及以上居民家庭投资银行理财、资管、信托产品的均值为23.9万元，是总体平均水平的1.4倍，占其家庭金融资产的比重为34.8％，远高于其他年龄段水平。调研发现，尽管资管新规出台后理财产品不再保本，部分银行代理销售的第三方投资理财产品风险较高，但仍有不少居民认为在银行购买理财产品本金不会损失，实际投资风险与居民投资安全性预期存在较大差距。65岁以上的老年群体处于收入来源减少的人生阶段，将大量资金投资银行理财、资管、信托等金融产品，增加了投资及养老的不确定因素。</p><p>第五，刚需型房贷家庭的债务风险突出。受调查家庭中，43.4％的家庭有住房贷款。有房贷家庭的资产负债率、金融资产负债率和月偿债收入比分别为16.5％、101.5％和29.0％，债务风险明显高于平均水平。其中刚需型房贷家庭的债务风险尤其突出，这三项指标分别为24.2％、151.3％和33.0％，均为所有群体中的最高值。相比之下，投资型房贷家庭的债务风险要小得多，其三项指标仅略高于平均水平。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101648.png"></p><p><small>△图11　居民家庭债务收入比的分布情况</small></p><p><strong>附：调查样本分布说明</strong></p><p>区域分布</p><p>本次调查涉及30个省（自治区、直辖市），共计31100户城镇居民家庭。调查采用多阶段随机抽样方法，省级样本数量分配权重为各省城镇人口占比，各省的具体样本数量如下。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101653.png"></p><p>人口分布</p><p>本次调查对象为县级以上城镇居民家庭，不包括农村居民家庭，与全国人口结构略有差异，但总体看人口的年龄分布与国家统计局公布的全国人口分布基本一致。</p><p>本次调查共覆盖城镇居民99868人，户均人口数为3.2人，略高于全国户均家庭规模（3.0人）。从年龄结构看，20岁以下及60岁以上人口占比略低，但总体分布与全国情况一致。具体如下。</p><p><img src="https://gitee.com/MyTypora/typorapic/raw/master/20210224101658.png"></p><p>（作者系中国人民银行调查统计司城镇居民家庭资产负债调查课题组）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为央行发布的关于中国城镇居民家庭户均资产的调查报告，对三万余户家庭的资产情况进行了调查，可以说是当前此类调查中最为完整、详实的调查。&lt;/p&gt;
&lt;p&gt;但是不知为何据说原链接地址的文章已经不可见，现放到这里留存。&lt;/p&gt;
    
    </summary>
    
      <category term="This is the life" scheme="http://maneback.github.io/categories/This-is-the-life/"/>
    
    
      <category term="文章" scheme="http://maneback.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>要买要看的书</title>
    <link href="http://maneback.github.io/2020/books/"/>
    <id>http://maneback.github.io/2020/books/</id>
    <published>2020-03-16T07:15:39.000Z</published>
    <updated>2021-01-06T13:26:44.838Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="心理人生认知理财">心理、人生、认知、理财</h2><ul><li>人格障碍的认知行为疗法</li><li>谁动了我的奶酪</li><li>思考快与慢</li><li>就业 利息与货币通论</li><li>被讨厌的勇气</li></ul><hr><h2 id="程序员必备">程序员必备</h2><ul><li>C++ Primer Plus</li><li>设计模式</li><li>编程珠玑</li><li>代码整洁之道</li><li>数据科学实战</li><li>Python3 反爬虫原理与绕过实战</li></ul>]]></content>
    
    <summary type="html">
    
      多读书
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好的文章</title>
    <link href="http://maneback.github.io/2020/articles/"/>
    <id>http://maneback.github.io/2020/articles/</id>
    <published>2020-03-16T06:32:57.000Z</published>
    <updated>2021-01-06T13:26:44.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol type="1"><li><a href="https://mp.weixin.qq.com/s/-CsQdRlCZM0GBFuln55qBA" target="_blank" rel="noopener">让赚钱思路更加开阔的7个小建议- 亦仁</a></li><li><a href="https://mp.weixin.qq.com/s/OzDgCLe9oRxqRNHbl2khDA" target="_blank" rel="noopener">我差点删了这篇文章 - 曾少贤</a></li><li><a href="https://mp.weixin.qq.com/s/xERimphWDelGpAvyOLx--Q" target="_blank" rel="noopener">你有很多事情可以做！- 曾少贤</a></li><li><a href="https://mp.weixin.qq.com/s/qp4XR48SMZk-MbWzYEGISA" target="_blank" rel="noopener">我最最最希望你们去看这10本书！- 曾少贤</a></li><li><a href="https://mp.weixin.qq.com/s/HvNreAVPOIR1W_cD2zrFow" target="_blank" rel="noopener">它是这两年最好看的慢综艺 - 三联生活周刊</a></li><li><a href="https://mp.weixin.qq.com/s/LDC4oonmowhCtbq8AcA1sA" target="_blank" rel="noopener">科技谎言下的人类危机 - 智先生</a></li><li><a href="https://mp.weixin.qq.com/s/BaQlRR1E4feA5oisbFEuEQ" target="_blank" rel="noopener">换个维度就耐心了 - AlpahGirl</a></li><li><a href="https://mp.weixin.qq.com/s/XXocOGvLDRHb8PgT_R8VyQ" target="_blank" rel="noopener">少时偶像 - AlphaGirl</a></li><li><a href="https://mp.weixin.qq.com/s/--YhEzHVE3IjgDA3cuLdeg" target="_blank" rel="noopener">巨头挤压生存空间，应该怎么办？ - caoz的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/WRUjfUWYC2q3Lh2PfrZPtw" target="_blank" rel="noopener">搜索已死，谁来烧纸。 - caoz的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/Rt4RCIvaatA1KWBD_H-73Q" target="_blank" rel="noopener">年薪百万是种怎样的体验 - caoz的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/ym0y0Dp-yNd-oInhwfoaTQ" target="_blank" rel="noopener">写给应届毕业生的40条人生箴言 - 曾少贤</a></li><li><a href="https://mp.weixin.qq.com/s/ym0y0Dp-yNd-oInhwfoaTQ" target="_blank" rel="noopener">蒋方舟：真正的自信，就是不去讨好所有人 - 曾少贤</a></li><li><a href="https://mp.weixin.qq.com/s/-MnStPI1VCuUpYIAhNR9vA" target="_blank" rel="noopener">94青年职场槽点|人生信箱 vol4 - AlphaGirl</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUyNDkyMTQ1Ng==&amp;mid=2247485198&amp;idx=1&amp;sn=3ecc21026058bd665caecaef614bd0ab" target="_blank" rel="noopener">这一万字里藏着中国未来最大的商机 - 进击波财经</a></li><li><a href="https://mp.weixin.qq.com/s/T3O7oMcCSav29xGo_kSy6A" target="_blank" rel="noopener">我唯一的害怕（北大毕业典礼致辞）- 半导体行业观察</a></li><li><a href="https://mp.weixin.qq.com/s/DdRiutUq2s5mPOYxM26E1w" target="_blank" rel="noopener">高手的系统 - 有些鸟</a></li><li><a href="https://mp.weixin.qq.com/s/RG0gcY7nhomWEKz0yGYysQ" target="_blank" rel="noopener">为什么一定要掌握自学能力？- 学习学习再学习</a></li><li><a href="https://mp.weixin.qq.com/s/j0YsxTOxepr1B5KPHfy8SQ" target="_blank" rel="noopener">谈谈事实和逻辑 - caoz的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/8HbLhVRFMrdE0l9xlCk9aQ" target="_blank" rel="noopener">那个成年人终于跪下来了 - 智先生</a></li><li><a href="https://mp.weixin.qq.com/s/dXg7LCoQNUTAiSrGengiNw" target="_blank" rel="noopener">普通人如何逆袭 - 小道消息</a></li><li><a href="https://mp.weixin.qq.com/s/KF4DgF9FPYW2D_M-uacNaw" target="_blank" rel="noopener">人工智障2：你看到的 AI 与智能无关</a></li><li><a href="https://mp.weixin.qq.com/s/AZo7ek21xdimRTjIHgijzg" target="_blank" rel="noopener">我杀死了平行宇宙里的自己——古巴特别篇 - 禅与宇宙维修艺术</a></li><li><a href="https://mp.weixin.qq.com/s/ZdmHPBYUayZanReORhce1Q" target="_blank" rel="noopener">我所亲历的5次泡沫破灭，千万富翁沦为街边小贩 - 财经连环话</a></li></ol><hr><p>以下为按时间正序：</p><ol type="1"><li><a href="https://mp.weixin.qq.com/s/-RJw6NxVz2KV1PxJRT0n1g" target="_blank" rel="noopener">支付宝毕其功于一役 - 半佛仙人</a></li><li><a href="https://mp.weixin.qq.com/s/0-1jy2PODNAc60ZwPVc4qQ" target="_blank" rel="noopener">为什么老板越来越不当人 - 半佛仙人</a></li><li><a href="https://mp.weixin.qq.com/s/js0APvMC0bpsfhAHyn_SLQ" target="_blank" rel="noopener">讲的很正确，为什么总是做不对 - caoz 的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/UuEk1-Na3RUO7HPxlank2w" target="_blank" rel="noopener">技术架构如何抓大放小 - caoz的梦呓</a></li><li><a href="https://mp.weixin.qq.com/s/ivF6ijlcuF9-amRwyDdGbw" target="_blank" rel="noopener">自信，还是自卑，别傻傻分不清 - caoz 的梦呓</a></li></ol><hr><p>技术干货</p><ol type="1"><li><a href="https://mp.weixin.qq.com/s/M4YPCE3ox3gAoicr_5VFAQ" target="_blank" rel="noopener">CNN 网络结构的发展 - 极市平台</a></li><li><a href="https://mp.weixin.qq.com/s/msKpZb2TLL2BLqqoPwrGrg" target="_blank" rel="noopener">CNN 是靠什么线索学习到深度信息的 - 极市平台</a></li><li><a href="https://mp.weixin.qq.com/s/msKpZb2TLL2BLqqoPwrGrg" target="_blank" rel="noopener">强化学习之路—清华博士后解读 83 篇文献 - 新智元</a></li><li><a href="https://mp.weixin.qq.com/s/A4r1BzkMny_rsgZf8uTYOQ" target="_blank" rel="noopener">理解卷积神经网络对局限 - 极市平台</a></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      收集一些自己看到的文章
    
    </summary>
    
      <category term="Amazing" scheme="http://maneback.github.io/categories/Amazing/"/>
    
    
      <category term="文章" scheme="http://maneback.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="人生" scheme="http://maneback.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>一个没有预料的假期</title>
    <link href="http://maneback.github.io/2020/2020jiaqi/"/>
    <id>http://maneback.github.io/2020/2020jiaqi/</id>
    <published>2020-03-11T09:27:32.000Z</published>
    <updated>2021-01-06T13:26:44.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2020年的一开始，一场谁都没有意料到过的疫情使全国的生活都陷入了停滞状态。如果从1月20日钟南山院士宣布疫情可以人传人开始，到现在3月11号已经过去50天了。就算从正月初十正常复工开始算起，到现在也已经38天了，然而还远没有何时恢复正常的确切消息，想着也不能就这么混日子一直混下去了，总得记录下点什么。</p><p><img src="https://raw.githubusercontent.com/maneback/TyporaPic/master/img/8b53b9396aa6572524df665e7ad3dae.jpg" style="zoom:50%;"></p><p>然而即使是确认出现人传人之后，我仍然没有正确地认识到这件事情造成的影响，没有意识到生活会停滞这么久，没有意识到会全球范围内大范围传染。就像世界上所有的国家一样，在确诊人数还没破百之时，都还是一副灾难不会降临到自己头上来的悠闲看戏姿态，而随之而来的便是爆炸性几乎直线增长。这时回过头才开始幡然悔悟。即使在中国这个世界工厂已经开始封城、停工停学之时，生产基本停滞之时，也没想过这个病毒的传播会如此之厉害。</p><p>以及我们隔天仍然头铁地出去赶集，虽然是待了口罩，但是大街上也到处都是不戴口罩以及嘲讽别人戴口罩的人。真实存在的无知与愚蠢。也没有提前囤积口罩，因为还是仍然存着一丝丝侥幸，觉得病毒不会来到这么偏僻的地方。但是当百货大楼开始出现越来越多越来越多的病例时，这时就开始真正的慌了，因为太近了，而且一个村子里的人的接触和流动性比城里的小区多多了，卫生条件也差，很容易在不经意之间被感染。</p><hr><p>疫情期间，股票市场也是非常有趣，先是连续几天大涨，大家伙都在鼓吹这牛市的到来，说：所有人都在等着跌了抄底，那股市就不会跌。疫情期间的股票仿佛就是一针稳定剂，说明大多数资本大多数人长时间来看对于这场疫情都是持乐观态度的。但是，没想到，除了东亚的中日韩三国外，欧洲各国以及美国也都相继沦陷，股市大跌。美国股票甚至触发了熔断机制，甚至是一周内两次熔断！多少人惊呼<strong>见证了历史</strong>。另外原油价格大跌，跌到了30美元一桶，“水比油贵”真的见证到了，沙特作为曾经美国的小弟在这个需求锐减的情况下仍选择提高产量来逼死竞争对手，这个世界怎么了？金融危机要来了吗？世界格局要变了吗？中国的国际地位要改变了吗？</p><p>我承认，我不懂股票市场，没时间收集分析各种信息，不懂金融市场的操作，没时间每天研究大盘动态，存在盲从心理，追涨杀跌，跌了之后稳不住心态，没有独立冷静的分析，害怕赔的更多，活该被当韭菜割。想当初一天赔了200多之后，转眼稳不住就卖了大多数，然而后来又涨回来了，损失却损失了。在涨得时候，却相信它会一直涨下去，不懂得适时止盈。分析了一下，自己的投资太分散了，在收益率足够高时，每一个的实际收益却并不多，但是也不能每一个都卖了。所以只能每天看着那个收益涨涨落落。对我来说，它只是个数字，并没有变成我口袋里的钱，永远都不是，很可能到最后都白辛苦一场。我的基本想法还是找个安稳的基金，一年安安稳稳地赚个5%-7%的收益率，这一年下来刚刚够买个AirPods的，不也挺好的吗。</p><p>这次的疫情应该说会改变了我的消费观，必须承认，过去两年有些过度消费了。但是承认归承认，必须改变这种情况。从乐高，到台式机，到iPhone，到降噪耳机，一次次外出吃饭。然而其实我并没有如此强的消费能力，我还很穷，所以一定要想方设法省钱。因为你完全不知道明天和意外哪个先到来。像现在这样一连两个月没有收入，能不能坚持下去？遇到其他类似的意外能不能挺过去？这都需要慎重的考虑。</p><p>所以消费之前仔细思考思考，切忌盲目消费，不要落入了消费主义的陷阱。而且我的家庭条件比较来讲，我并不能一人吃饱全家不饿的样子。所以必须从现在开始就省吃俭用，省钱。淘宝看的那些衣服应该不会全买了，食堂也该也不会一天两顿都去学三二楼那种一顿饭十二三起步的地方去吃了。一天三十五和一天二十五的标准一个月下来就差了三百了，一年就是2400了。所以必须学会开源节流，没法开源就得更加节流。</p><p>现在想起来每花一笔钱都觉得很心疼，因为对自己的未来是悲观的预期。我承认我一直都是悲观保守的心态，但是之前仿佛没有如此之悲观，就犹如这两天绿油油的股票市场一般的绝望心态，找不到变好的路，什么都想尝试，但是又觉得尝试。</p><p>就在昨天，2020年03月10号，全网发生一个重大事件，关于某一医生的专访在全网刷屏与全网删帖之间反复摇摆。然而仿佛越删，越能激发广大网友的“<strong>创造力</strong>”与热情，各种语言的版本都开始出现了。其实不明白为什么要删，是上面有人怕被追责吗。</p><p><img src="https://raw.githubusercontent.com/maneback/TyporaPic/master/img/e54f84083693f0de1f9f6cb16f553f4.jpg" style="zoom:50%;"></p><p>李文亮被称为吹哨人，但是被训诫。从某种意义上讲，《人物》也可以算是某种意义上的吹哨人，但是再一次被删帖，这充分说明这个魔幻的世界，你觉得它经历了之前的事件之后它会做出一些改变，然而并没有。</p><p>当这个社会就只有一个声音的时候，所有人都报喜不报忧，以稳定为借口隐瞒真相的时候，并不是说隐患就被解决不存在了，它只是被压抑了，在等待着下一个出口。所有人也都看到了，隐瞒真相只会产生错误的评估与决策。这次的事件不得不说与先前的忽视与误判有着很大的关系。讨论与批评并不是坏事，大多数普通人的想法都不是怎样怎样，他们只关心自己的生活能变好，吃得好过得好，能够多赚一点钱，活得更滋润一点，悠闲一点。而批评也只是希望能够解决某些不好的问题，让自己的生活更稳定，而不是把它干翻，或者被别人干翻。这并没什么不好，他们不会到处乱喷，到处惹事</p><p>互联网是有记忆的，然而人没有，过不了多久，人们就会忘记了这件事，估计只有下次再次出现疫情的时候才会被人们想起。</p><p>冷静思考了一下，看了一下前几条微博，自己仿佛一个喷子一样，发的微博都是在网上喷这喷那的。</p><p>肖战事件</p><hr><p>或许我就应该平平淡淡找个角落孤独地过完一生，没有年薪百万，没有多的需求，没有欲望，没有这的那的，就一天挣够一天的饭钱然后抬头望着天。不能够适应这个残酷的社会。真的不能吗？为什么自己一点继续前进的动力都没有了？一次次信心满志又一次次在沉默中慢慢消亡了。难道真的是我习惯了怠惰，陷入舒适圈无法自拔？还是因为自己一直以来都没有目标，就这么浑浑噩噩地耗着，而恰巧之前耗得比较好，而现在比较难熬，就原形毕露了。</p><p>学习来讲，如果从2月14日最开始的第一次正式组会汇报开始算起，到现在已经到了第五个星期了，然而学习的热情大概只保持了三个星期，到后来就看着这个想别的，看着别的想这个。仿佛已经失去了学习的热情与创新的灵感。就只是一味地在被动地接收知识，而不是消化吸收，举一反三。</p><p>校历也来到了第四周，八周的课程上完了一半，但是基本上还是没学会什么知识。就网课这个形式来讲，就王某老师讲课的方式来讲，感觉这个老师讲课完全抓不住重点，简单的东西也细致地讲，然后复杂的东西可能就一句话带过了。对比了MIT的公开课，以及本校老师的数学课程的讲课方式。你会发现非常大的差别，本校老师完全就是照着PPT讲着看不懂的高深概念，而这是一个通病，只要看着高大上，看着困难，看着牛逼，就说明书写得好，课教得好。而不是以教学易懂为目的，忽略了学生的接受能力和水平。</p>]]></content>
    
    <summary type="html">
    
      写于武汉新冠肺炎之中
    
    </summary>
    
      <category term="碎碎念" scheme="http://maneback.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="人生" scheme="http://maneback.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="不定期更新" scheme="http://maneback.github.io/tags/%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Music</title>
    <link href="http://maneback.github.io/2020/music-test/"/>
    <id>http://maneback.github.io/2020/music-test/</id>
    <published>2020-03-03T13:22:16.000Z</published>
    <updated>2021-01-06T13:26:44.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>终于找到了在博客中插入音乐的方法了。之前在网易云生成外链的方法不知道怎么就失效了呢。</p><p>新的方法使用了 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a> 和 <a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a> 。</p><p>先来一首最近非常非常喜欢的一个翻唱歌手唱的一首歌：</p>    <div id="aplayer-qSzlRNjM" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="567935536" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><h4 id="安装">1. 安装</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span>  <span class="comment">--save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure><h4 id="使用">2.使用</h4><p>aplayer可以引用本地的音乐文件，但是有时候显然会比较麻烦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>title</code> : 曲目标题</li><li><code>author</code>: 曲目作者</li><li><code>url</code>: 音乐文件 URL 地址</li><li><code>picture_url</code>: (可选) 音乐对应的图片地址</li><li><code>narrow</code>: （可选）播放器袖珍风格</li><li><code>autoplay</code>: (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li><code>width:xxx</code>: (可选) 播放器宽度 (默认: 100%)</li><li><code>lrc:xxx</code>: （可选）歌词文件 URL 地址</li></ul><p>需要开启hexo的文章资源文件夹功能，将图片、音乐文件、歌词文件都放在与文章相对应的资源文件夹中，然后直接引用</p><h4 id="metingjs">3. MetingJS</h4><p>现在hexo的配置文件<code>_config.yml</code>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">  meting:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接着就可以用<code>\    <div id="aplayer-fPZiicYi" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div></code>在文章中使用播放器了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span><br><span class="line">&#123;% meting "60198" "netease" "playlist" "mini:true" %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr class="even"><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr class="odd"><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr class="even"><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr class="odd"><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr class="even"><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr class="odd"><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr class="even"><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr class="odd"><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr class="even"><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr class="odd"><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr class="even"><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr class="odd"><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr class="even"><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr class="odd"><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr class="even"><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      在 hexo 博客中插入音乐
    
    </summary>
    
      <category term="Amazing" scheme="http://maneback.github.io/categories/Amazing/"/>
    
    
  </entry>
  
  <entry>
    <title>latex 速查表</title>
    <link href="http://maneback.github.io/2020/latex/"/>
    <id>http://maneback.github.io/2020/latex/</id>
    <published>2020-02-18T09:15:00.000Z</published>
    <updated>2021-01-06T13:26:44.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一-集合操作">一、 集合操作</h1><table><tbody><tr class="odd"><td><code>\mid</code></td><td><span class="math inline">\(A \mid B\)</span></td></tr><tr class="even"><td>属于<code>\in</code></td><td><span class="math inline">\(a_i\in A\)</span></td></tr><tr class="odd"><td>不属于<code>\not\in</code></td><td><span class="math inline">\(a_i\not\in A\)</span></td></tr><tr class="even"><td>包含于<code>\subset</code></td><td><span class="math inline">\(A \subset B\)</span></td></tr><tr class="odd"><td>子集 <code>\subseteq</code></td><td><span class="math inline">\(A \subseteq B\)</span></td></tr><tr class="even"><td>真包含于<code>\subsetneqq</code></td><td><span class="math inline">\(A \subsetneqq B\)</span></td></tr><tr class="odd"><td>包含<code>\supset</code></td><td><span class="math inline">\(A \supset B\)</span></td></tr><tr class="even"><td>真包含 <code>\supsetneqq</code></td><td><span class="math inline">\(A \supsetneqq B\)</span></td></tr><tr class="odd"><td>交集<code>\cap</code></td><td><span class="math inline">\(A \cap B\)</span></td></tr><tr class="even"><td>并集 <code>\cup</code></td><td><span class="math inline">\(A \cup B\)</span></td></tr><tr class="odd"><td>实数集合 <code>\mathbb{R}</code></td><td><span class="math inline">\(\mathbb{R}\)</span></td></tr><tr class="even"><td>空集<code>\emptyset</code></td><td><span class="math inline">\(\emptyset\)</span></td></tr><tr class="odd"><td></td><td></td></tr></tbody></table><h1 id="二数学运算">二、数学运算</h1><table><colgroup><col style="width: 52%"><col style="width: 47%"></colgroup><tbody><tr class="odd"><td>分数 <code>\frac{}{}</code></td><td><span class="math inline">\(\frac{a}{b}\)</span></td></tr><tr class="even"><td>花体字母<code>\mathbb{}</code></td><td><span class="math inline">\(\mathbb{ABC}\)</span></td></tr><tr class="odd"><td><code>\nabla</code></td><td><span class="math inline">\(\nabla\)</span></td></tr><tr class="even"><td><code>\partial</code></td><td><span class="math inline">\(\partial x\)</span></td></tr><tr class="odd"><td>不等号<code>\neq</code></td><td><span class="math inline">\(x \neq 1\)</span></td></tr><tr class="even"><td>角度`<code>\sin\!\frac{\pi}{3}=\sin60^\{operatorname{\omicron}}</code></td><td><span class="math inline">\(\sin\!\frac{\pi}{3}=\sin60^{\operatorname{\omicron}}\)</span></td></tr></tbody></table><h1 id="三逻辑">三、逻辑</h1><table><tbody><tr class="odd"><td>逻辑与 <code>land</code></td><td><span class="math inline">\(A \land B\)</span></td></tr><tr class="even"><td>逻辑或 <code>lor</code></td><td><span class="math inline">\(A \lor B\)</span></td></tr><tr class="odd"><td>逻辑非 <code>\lnot</code></td><td><span class="math inline">\(\lnot B\)</span></td></tr><tr class="even"><td><code>\to</code></td><td><span class="math inline">\(p\to q\)</span></td></tr><tr class="odd"><td></td><td></td></tr></tbody></table><h1 id="三上标下标及积分等">三、上标、下标及积分等</h1><table><tbody><tr class="odd"><td>前置上下标<code>{}_1^2X_3^4</code></td><td><span class="math inline">\({}_1^2X_3^4\)</span></td></tr><tr class="even"><td>向量 <code>\vec{x}</code></td><td><span class="math inline">\(\vec{x}\)</span></td></tr><tr class="odd"><td>无穷 <code>\infty</code></td><td><span class="math inline">\(\infty\)</span></td></tr><tr class="even"><td>求和 <code>\sum_{k=1}^n x_k</code></td><td><span class="math inline">\(\sum_{k=1}^n x_k\)</span></td></tr><tr class="odd"><td>求积<code>\prod_{k=1}^n x_k</code></td><td><span class="math inline">\(\prod_{k=1}^n x_k\)</span></td></tr><tr class="even"><td>极限 <code>\lim_{n \to \infty} x_n</code></td><td><span class="math inline">\(\lim_{n \to \infty} x_n\)</span></td></tr><tr class="odd"><td>积分 <code>\int_{-N}^{N} e^x</code></td><td><span class="math inline">\(\int_{-N}^{N} e^x\)</span></td></tr><tr class="even"><td>双重积分 <code>\iint_{D}^{W}\,dx\,dy</code></td><td><span class="math inline">\(\iint_{D}^{W}xy\,dxdy\)</span></td></tr><tr class="odd"><td>三重积分<code>\iiint_{E}^{V}\,xyz\,dxdydz</code></td><td><span class="math inline">\(\iiint_{E}^{V}\,xyz\,dxdydz\)</span></td></tr><tr class="even"><td>曲线曲面积分<code>\oint_{C}x^3\,dx+4y^2\,dy</code></td><td><span class="math inline">\(\oint_{C}x^3\,dx+4y^2\,dy\)</span></td></tr></tbody></table><h1 id="四分数矩阵和多行列式">四、分数、矩阵和多行列式</h1><table><colgroup><col style="width: 52%"><col style="width: 47%"></colgroup><tbody><tr class="odd"><td>分数<code>\frac{1}{2}=0.5</code></td><td><span class="math inline">\(\frac{1}{2}=0.5\)</span></td></tr><tr class="even"><td>小分数<code>\tfrac{1}{2}=0.5</code></td><td><span class="math inline">\(\tfrac{1}{2}=0.5\)</span></td></tr><tr class="odd"><td>二项式系数<code>\dbinom{n}{r}=C_n^r</code></td><td><span class="math inline">\(\dbinom{n}{r}=C_n^r\)</span></td></tr><tr class="even"><td>矩阵<code>\begin{matrix}x&amp;y \\ z&amp;v\end{matrix}</code></td><td><span class="math display">\[\begin{matrix}x&amp;y \\ z&amp;v\end{matrix}\]</span></td></tr><tr class="odd"><td>矩阵<code>\begin{vmatrix}x&amp;y \\ z&amp;v\end{vmatrix}</code></td><td><span class="math inline">\(\begin{vmatrix}x&amp;y \\ z&amp;v\end{vmatrix}\)</span></td></tr><tr class="even"><td>矩阵<code>\begin{Vmatrix}x&amp;y \\ z&amp;v\end{Vmatrix}</code></td><td><span class="math inline">\(\begin{Vmatrix}x&amp;y \\ z&amp;v\end{Vmatrix}\)</span></td></tr><tr class="odd"><td></td><td></td></tr><tr class="even"><td></td><td></td></tr><tr class="odd"><td></td><td></td></tr></tbody></table><h2 id="矩阵">矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">x &amp; y \\</span><br><span class="line">z &amp; v</span><br><span class="line">\<span class="keyword">end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{matrix}x &amp; y \\z &amp; v\end{matrix}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line"><span class="number">0</span> &amp; \cdots &amp; <span class="number">0</span> \\</span><br><span class="line">\vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line"><span class="number">0</span> &amp; \cdots &amp; <span class="number">0</span></span><br><span class="line">\<span class="keyword">end</span>&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{bmatrix}0 &amp; \cdots &amp; 0 \\\vdots &amp; \ddots &amp; \vdots \\0 &amp; \cdots &amp; 0\end{bmatrix}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line"><span class="number">1</span> &amp; <span class="number">2</span> \\</span><br><span class="line"><span class="number">3</span> &amp; <span class="number">4</span></span><br><span class="line">\<span class="keyword">end</span>&#123;Bmatrix&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{Bmatrix}1 &amp; 2 \\3 &amp; 4\end{Bmatrix}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">a &amp; b \\</span><br><span class="line">c &amp; d</span><br><span class="line">\<span class="keyword">end</span>&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{pmatrix}a &amp; b \\c &amp; d\end{pmatrix}\]</span></p><ul><li>条件定义</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(n)=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">n/<span class="number">2</span>, &amp; \mbox&#123;<span class="keyword">if</span> &#125;n \mbox&#123; is even&#125; \\</span><br><span class="line"><span class="number">3</span>n+<span class="number">1</span>, &amp; \mobx&#123;<span class="keyword">if</span> &#125;n \mobx&#123; is odd&#125;</span><br><span class="line">\<span class="keyword">end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[f(n)=\begin{cases}n/2, &amp; if\; n\;is\; even \\3n+1, &amp; if\; n\; is\; odd\end{cases}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">f(x)&amp;=(m+n)^<span class="number">2</span> \\</span><br><span class="line">&amp;=m^<span class="number">2</span> + <span class="number">2</span>mn + n^<span class="number">2</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;align&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{align}f(x)&amp;=(m+n)^2 \\&amp;=m^2 + 2mn + n^2\\\end{align}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;alignat&#125;&#123;<span class="number">2</span>&#125;</span><br><span class="line">f(x) &amp; = (m-n) ^ <span class="number">2</span> \\</span><br><span class="line">f(x) &amp; = (-m+n) ^ <span class="number">2</span> \\</span><br><span class="line">&amp; = m^<span class="number">2</span><span class="number">-2</span>mn+n^<span class="number">2</span> \\</span><br><span class="line">\<span class="keyword">end</span>&#123;alignat&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{alignat}{2}f(x) &amp; = (m-n) ^ 2 \\f(x) &amp; = (-m+n) ^ 2 \\&amp; = m^2-2mn+n^2 \\\end{alignat}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;array&#125;&#123;lcl&#125;</span><br><span class="line">z &amp; = &amp; a\\</span><br><span class="line">f(x,y,z) &amp; = &amp; x+y+z</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{array}{lcl}z &amp; = &amp; a\\f(x,y,z) &amp; = &amp; x+y+z\end{array}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;cases&#125;</span><br><span class="line"><span class="number">3</span>x + <span class="number">5</span>y +  z \\</span><br><span class="line"><span class="number">7</span>x - <span class="number">2</span>y + <span class="number">4</span>z \\</span><br><span class="line"><span class="number">-6</span>x + <span class="number">3</span>y + <span class="number">2</span>z</span><br><span class="line">\<span class="keyword">end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{cases}3x + 5y +  z \\7x - 2y + 4z \\-6x + 3y + 2z\end{cases}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\begin&#123;array&#125;&#123;|c|c||c|&#125; a &amp; b &amp; S \\</span><br><span class="line">\hline</span><br><span class="line"><span class="number">0</span>&amp;<span class="number">0</span>&amp;<span class="number">1</span>\\</span><br><span class="line"><span class="number">0</span>&amp;<span class="number">1</span>&amp;<span class="number">1</span>\\</span><br><span class="line"><span class="number">1</span>&amp;<span class="number">0</span>&amp;<span class="number">1</span>\\</span><br><span class="line"><span class="number">1</span>&amp;<span class="number">1</span>&amp;<span class="number">0</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{array}{|c|c|c|} a &amp; b &amp; S \\\hline0ooo&amp;0&amp;1\\0&amp;1&amp;1\\1&amp;0&amp;1\\1&amp;1&amp;0\\\end{array}\]</span></p><h1 id="五字体">五、字体</h1><h2 id="希腊字母">希腊字母</h2><ul><li>大写</li></ul><table><thead><tr class="header"><th></th><th style="text-align: center;"></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\Alpha\)</span></td><td style="text-align: center;"><span class="math inline">\(\Beta\)</span></td><td><span class="math inline">\(\Gamma\)</span></td><td><span class="math inline">\(\Delta\)</span></td><td><span class="math inline">\(\Epsilon\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\Zeta\)</span></td><td><span class="math inline">\(\Eta\)</span></td><td><span class="math inline">\(\Theta\)</span></td><td><span class="math inline">\(\Iota\)</span></td><td><span class="math inline">\(\Kappa\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th>\Nu</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\Lambda\)</span></td><td><span class="math inline">\(\Mu\)</span></td><td><span class="math inline">\(\Nu\)</span></td><td><span class="math inline">\(\Xi\)</span></td><td><span class="math inline">\(\Omicron\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\Pi\)</span></td><td><span class="math inline">\(\Rho\)</span></td><td><span class="math inline">\(\Sigma\)</span></td><td><span class="math inline">\(\Tau\)</span></td><td><span class="math inline">\(\Upsilon\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th>\\\\\\\</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\Phi\)</span></td><td><span class="math inline">\(\Chi\)</span></td><td><span class="math inline">\(\Psi\)</span></td><td><span class="math inline">\(\Omega\)</span></td><td></td></tr></tbody></table><ul><li>小写</li></ul><table><thead><tr class="header"><th style="text-align: center;"></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\alpha\)</span></td><td><span class="math inline">\(\beta\)</span></td><td><span class="math inline">\(\gamma\)</span></td><td><span class="math inline">\(\delta\)</span></td><td><span class="math inline">\(\epsilon\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\zeta\)</span></td><td><span class="math inline">\(\eta\)</span></td><td><span class="math inline">\(\theta\)</span></td><td><span class="math inline">\(\iota\)</span></td><td><span class="math inline">\(\kappa\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\varkappa\)</span></td><td><span class="math inline">\(\lambda\)</span></td><td><span class="math inline">\(\mu\)</span></td><td><span class="math inline">\(\nu\)</span></td><td><span class="math inline">\(\xi\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\omicron\)</span></td><td><span class="math inline">\(\pi\)</span></td><td><span class="math inline">\(\rho\)</span></td><td><span class="math inline">\(\sigma\)</span></td><td><span class="math inline">\(\tau\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\upsilon\)</span></td><td>$$</td><td><span class="math inline">\(\chi\)</span></td><td><span class="math inline">\(\psi\)</span></td><td><span class="math inline">\(\omega\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\varepsilon\)</span></td><td><span class="math inline">\(\vartheta\)</span></td><td>$ $</td><td><span class="math inline">\(\varpi\)</span></td></tr></tbody></table><table><thead><tr class="header"><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\varrho\)</span></td><td><span class="math inline">\(\varsigma\)</span></td><td><span class="math inline">\(\varphi\)</span></td></tr></tbody></table><h2 id="字体">字体</h2><h4 id="粗体">粗体</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\mathbb&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\]</span></p><p>只有大写拉丁字母才能正常显示，使用小写字母或数字时会得到其他符号。</p><hr><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\boldsymbol&#123;\Alpha \alpha \Beta \<span class="built_in">beta</span>&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\boldsymbol{\Alpha \alpha \Beta \beta}\]</span></p><p>粗体的希腊字母，大小写均可</p><hr><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\mathbf&#123;<span class="number">012</span>,abc,ABC&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\mathbf{012,abc,ABC}\]</span></p><p>拉丁字母和数字的粗体，不能用于希腊字母。</p><h4 id="哥特体">哥特体</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\mathfrak&#123;abcdefghijklmnopqrstuvwxyz&#125;</span><br><span class="line">\mathfrak&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;</span><br><span class="line">\marhfrak&#123;<span class="number">1234567890</span>&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\mathfrak{abcdefghijklmnopqrstuvwxyz}\\\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\\mathfrak{1234567890}\]</span></p><h4 id="手写体">手写体</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\mathcal&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;</span><br></pre></td></tr></table></figure><p><span class="math display">\[\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\]</span></p><p>注意：手写字体仅对大写拉丁字母有效。</p><h1 id="六括号">六、括号</h1><h1 id="其他">其他</h1><table><tbody><tr class="odd"><td>加帽子^ <code>\hat</code> 或者<code>\widehat</code></td><td><span class="math inline">\(\hat A\)</span></td></tr><tr class="even"><td>上划线 <code>\overline</code></td><td>$ A$</td></tr><tr class="odd"><td>下划线<code>\undweline</code></td><td><span class="math inline">\(\underline{A}\)</span></td></tr><tr class="even"><td>加波浪线 <code>\widetilde</code></td><td><span class="math inline">\(\widetilde A\)</span></td></tr><tr class="odd"><td>加点 <code>\dot{}</code></td><td><span class="math inline">\(\dot A\)</span></td></tr><tr class="even"><td>加两个点 <code>\ddot</code></td><td><span class="math inline">\(\ddot A\)</span></td></tr><tr class="odd"><td>加箭头 <code>\vec</code></td><td><span class="math inline">\(\vec A\)</span></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      latex 常用公式速查表
    
    </summary>
    
      <category term="knowledge" scheme="http://maneback.github.io/categories/knowledge/"/>
    
    
      <category term="latex" scheme="http://maneback.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>python内置函数</title>
    <link href="http://maneback.github.io/2020/python-functions/"/>
    <id>http://maneback.github.io/2020/python-functions/</id>
    <published>2020-02-10T11:20:25.000Z</published>
    <updated>2021-01-06T13:26:44.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>介绍一些python内置函数的用法</p><blockquote><p>emumerate / join / zip</p></blockquote><a id="more"></a><h3 id="emumerate">1. emumerate()</h3><p>对于一个可迭代/可遍历的对象（如列表、字符串等），可以使用<code>enumerate()</code>同时获得索引值和数值，将得到以下object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, lis[<span class="number">0</span>]), (<span class="number">1</span>, lis[<span class="number">1</span>]), (<span class="number">2</span>, lis[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>对于一个列表，既想遍历索引，又想遍历元素时，我们可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'cpp'</span>, <span class="string">'html'</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(lis):</span><br><span class="line">    print(index, item)</span><br><span class="line"><span class="comment">####&gt;&gt;&gt;</span></span><br><span class="line"><span class="number">0</span> python</span><br><span class="line"><span class="number">1</span> java</span><br><span class="line"><span class="number">2</span> cpp</span><br><span class="line"><span class="number">3</span> html</span><br></pre></td></tr></table></figure><p>enumerrate 还可以接收第二个参数，作为索引的起始值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'cpp'</span>, <span class="string">'html'</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(lis, <span class="number">1</span>):</span><br><span class="line">    print(index, item)</span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="number">1</span> python</span><br><span class="line"><span class="number">2</span> java</span><br><span class="line"><span class="number">3</span> cpp</span><br><span class="line"><span class="number">4</span> html</span><br></pre></td></tr></table></figure><p>注意：第二个参数不是修改遍历的起始位置，仍然是遍历所有元素，它只会修改索引的值。</p><h3 id="join">2. join</h3><p>python 的<code>join()</code> 函数可用于将序列中的每个元素，以指定的分隔符连接成一个新的字符串。(很是方便。)</p><p>PS: 连接符可以是字符串，而不需要是单个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">' '</span>.join(sql)</span><br><span class="line"><span class="string">'-'</span>.join(sql)</span><br><span class="line"><span class="string">','</span>.join(sql)</span><br><span class="line"><span class="string">'.'</span>.join(sql)</span><br></pre></td></tr></table></figure><h3 id="zip">3. zip</h3><p><code>zip()</code>函数以可迭代的对象作为参数，将对象中对应位置的元素打包成为一个个元组，再返回有这些元组组成的一个列表。</p><p>若各个迭代器的元素的个数不相同，则返回的列表长度与最短的对象相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">zipped = zip(a, b)</span><br><span class="line"><span class="comment"># ====&gt;</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure><h3 id="反向迭代-reverse">4. 反向迭代 reverse</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> reversed(l):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h3 id="迭代器">5. 迭代器</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># filter 实现带有筛选功能的迭代器</span><br><span class="line">def upper(val):</span><br><span class="line"><span class="keyword">if</span> val&gt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> True</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> False</span><br><span class="line">lis = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">-4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">g = filter(upper, lis)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一些python内置函数的用法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;emumerate / join / zip&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://maneback.github.io/tags/python/"/>
    
  </entry>
  
</feed>
